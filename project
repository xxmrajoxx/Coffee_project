SELECT * FROM CITY; -- CITY_ID, CITY_NAME
SELECT * FROM PRODUCTS; -- PRODUCT_ID
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID

-- Q.1 Coffee Consumers Count
-- How many people in each city are estimated to consume coffee, given that 25% of the population does?

SELECT 
	CITY_NAME,
	ROUND((POPULATION * 0.25)/1000000, 2) AS CONSUMERS_in_millions,
	CITY_RANK
FROM CITY
ORDER BY 2 DESC;

-- Q.2
-- Total Revenue from Coffee Sales What is the total revenue generated from coffee sales across all cities in the last quarter of 2023?

SELECT 
	CT.CITY_NAME,
	sum(S.total) as total_revenue,
	rank() over(order by sum(s.total) DESC) as revenue_rank
FROM SALES as s
join CUSTOMERs as c
ON S.CUSTOMER_ID = C.CUSTOMER_ID
join city as ct
on ct.CITY_ID = C.CITY_ID
where EXTRACT(YEAR FROM sale_date) = 2023
and
EXTRACT(QUARTER FROM sale_date) = 4
GROUP BY 1;

-- Q.3
-- Sales Count for Each Product
-- How many units of each coffee product have been sold?

SELECT * FROM SALES 

--My way
SELECT 
	P.PRODUCT_NAME,
	COUNT(P.PRODUCT_ID) AS NUMBER_OF_PRODUCT_SOLD,
	RANK() OVER(ORDER BY COUNT(P.PRODUCT_ID) DESC) AS rank
FROM SALES AS S
JOIN PRODUCTS AS P
ON S.PRODUCT_ID = P.PRODUCT_ID
GROUP BY 1;

--option 2 as tutorial
SELECT 
	p.product_name,
	count(s.sale_id) as total_order
FROM products as p
left join sales as s
on s.product_id = p.product_id
group by 1
order by 2 desc;

-- left join to see if there are any sales with null as products just has the name of the product

-- Q.4
-- Average Sales Amount per City
-- What is the average sales amount per customer in each city?

-- city abd total sale
-- no cx in each these city

SELECT * FROM CITY; -- CITY_ID, CITY_NAME
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID;

SELECT 
	C.CITY_NAME,
	AVG(S.TOTAL) AS AVERAGE_SALES
FROM SALES AS S
JOIN CUSTOMERS AS CT
ON CT.CUSTOMER_ID = S.CUSTOMER_ID
JOIN CITY AS C 
ON CT.CITY_ID = C.CITY_ID
GROUP BY 1;

SELECT 
	S.CUSTOMER_ID,
	C.CITY_NAME,
	ROUND(AVG(S.TOTAL)::NUMERIC ,2) AS AVERAGE_CUSTOMER_SALES
FROM SALES AS S 
JOIN CUSTOMERS AS CT
ON CT.CUSTOMER_ID = S.CUSTOMER_ID
JOIN CITY AS C
ON C.CITY_ID = CT.CITY_ID
GROUP BY 1,2
ORDER BY 3 DESC

-- Find the total amount of sales per city and do a distinct count of the number of customer per city
-- Find the average by the total sum of sales / per customer. 

WITH CTE AS (
SELECT 
	C.CITY_NAME,
	SUM(S.TOTAL) AS TOTAL_SALES,
	COUNT(DISTINCT CT.CUSTOMER_ID) AS PER_CUSTOMER_IN_CITY
FROM SALES AS S
JOIN CUSTOMERS AS CT
ON CT.CUSTOMER_ID = S.CUSTOMER_ID
JOIN CITY AS C 
ON CT.CITY_ID = C.CITY_ID
GROUP BY 1
)
SELECT
	CITY_NAME,
	ROUND ((TOTAL_SALES/PER_CUSTOMER_IN_CITY)::NUMERIC , 2)
FROM CTE
ORDER BY 2 DESC
	

-- Q.5
-- City Population and Coffee Consumers (25%)
-- Provide a list of cities along with their populations and estimated coffee consumers.
-- return city_name, total current cx, estimated coffee consumers (25%)
 
SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM PRODUCTS; -- PRODUCT_ID
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID

WITH CITY_TABLE AS
(
	SELECT 
		CITY_NAME,
		ROUND(POPULATION * 0.25/1000000,2) AS COFFEE_CONSUMERS_MILLIONS
	FROM CITY
),
 CUSTOMERS_TABLE AS
 (
	SELECT 
		CI.CITY_NAME,
		COUNT(DISTINCT C.CUSTOMER_ID) AS UNIQUE_CUSTOMERS
	FROM SALES AS S
	JOIN CUSTOMERS AS C
	ON C.CUSTOMER_ID = S.CUSTOMER_ID
	JOIN CITY AS CI
	ON CI.CITY_ID = C.CITY_ID
	GROUP BY 1
)
SELECT 
	CITY_TABLE.CITY_NAME,
	CITY_TABLE.COFFEE_CONSUMERS_MILLIONS,
	CUSTOMERS_TABLE.UNIQUE_CUSTOMERS
FROM CITY_TABLE
JOIN CUSTOMERS_TABLE
ON CITY_TABLE.CITY_NAME = CUSTOMERS_TABLE.CITY_NAME;


-- Q6
-- Top Selling Products by City
-- What are the top 3 selling products in each city based on sales volume?
-- What are the total says less than 4rd selling products in each city based on sales volume?

SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM PRODUCTS; -- PRODUCT_ID
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID, TOTAL

WITH CTE AS
(SELECT 
	ci.city_name,
		p.product_name,
	RANK() OVER(PARTITION BY CITY_NAME ORDER BY SUM(TOTAL) DESC) AS B
FROM SALES AS S
JOIN PRODUCTS AS P
ON P.PRODUCT_ID = S.PRODUCT_ID
JOIN CUSTOMERS AS C
ON C.CUSTOMER_ID = S.CUSTOMER_ID
JOIN CITY AS CI
ON CI.CITY_ID = C.CITY_ID
GROUP BY 1,2) 
SELECT * FROM CTE WHERE B >3

SELECT * FROM
(
SELECT 
	CI.CITY_NAME, 
	P.PRODUCT_NAME,
	DENSE_RANK() OVER(PARTITION BY CI.CITY_NAME ORDER BY COUNT(S.SALE_ID) DESC) AS RANKING
FROM sales as s
JOIN PRODUCTS AS P
ON S.PRODUCT_ID = P.PRODUCT_ID
JOIN CUSTOMERS AS C
ON C.CUSTOMER_ID = S.CUSTOMER_ID
JOIN CITY AS CI
ON CI.CITY_ID = C.CITY_ID
GROUP BY 1,2) AS T1
WHERE RANKING <= 3

--WHEN DOING RANKING, UNDERSTAND WHAT YOU WANT TO RANK FIRST THAN TO THE WINDOW RANK FUNCTION


-- Q.7
-- Customer Segmentation by City
-- How many unique customers are there in each city
-- who has purchased coffee products?

SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM PRODUCTS; -- PRODUCT_ID
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID, TOTAL

SELECT 
	CITY_NAME,
	COUNT(DISTINCT S.CUSTOMER_ID)
FROM CITY AS C
JOIN CUSTOMERS AS CI
ON C.CITY_ID = CI.CITY_ID
JOIN SALES AS S 
ON S.CUSTOMER_ID = CI.CUSTOMER_ID
WHERE PRODUCT_ID IN (1,2,3,4,5,6,7,8,9,10,11,12,13,14)
GROUP BY 1

SELECT * FROM SALES

-- Q.8
-- Average Sale vs Rent
-- Find each city and their average sale per customer and avg rent per customer

SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM PRODUCTS; -- PRODUCT_ID
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID, TOTAL


WITH AVERAGE_SALES 
AS
	(SELECT 
		CI.CITY_NAME,
		SUM(TOTAL) AS TOTAL_SALES,
		COUNT(S.CUSTOMER_ID) AS TOTAL_CUSTOMERS,
		SUM(TOTAL)/COUNT(DISTINCT S.CUSTOMER_ID) AS AVERAGE_SALES_PER_CUSTOMER
	FROM CUSTOMERS as c
	JOIN SALES AS S
	ON S.CUSTOMER_ID = C.CUSTOMER_ID
	JOIN CITY AS CI
	ON CI.CITY_ID = C.CITY_ID
	GROUP BY 1
	ORDER BY 4 DESC
	),
CITY_RENT 
AS
(SELECT
	CITY_NAME,
	ESTIMATED_RENT
FROM CITY
),
POPULATION 
AS
(SELECT 
	CITY_NAME,
	COUNT(CUSTOMER_ID) AS NUMBER_OF_CUSTOMERS
	FROM CUSTOMERS AS C
	JOIN CITY AS CT
	ON C.CITY_ID = CT.CITY_ID
	GROUP BY 1)
SELECT 
	AVGS.CITY_NAME,
	ROUND(AVERAGE_SALES_PER_CUSTOMER:: NUMERIC, 2) AS AVERAGE_SALES,
	NUMBER_OF_CUSTOMERS,
	--ESTIMATED_RENT,
	ROUND(ESTIMATED_RENT::NUMERIC /NUMBER_OF_CUSTOMERS::NUMERIC, 2) AS AVERAGE_RENT
	FROM AVERAGE_SALES AS AVGS
	JOIN CITY_RENT AS CR
	ON AVGS.CITY_NAME = CR.CITY_NAME
	JOIN POPULATION AS P
	ON P.CITY_NAME = CR.CITY_NAME
	ORDER BY 1,4 DESC

-- Q.9
-- Monthly Sales Growth
-- Sales growth rate: Calculate the percentage growth (or decline) in sales over different time periods (monthly)
-- by each city


SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID


--CREATED MONTHLY TOTAL SALE VIEW BASE FOR EACH CITY
WITH MONTHLY_SALES AS 
	(
	SELECT 
		CT.CITY_NAME AS CITY_NAME,
		EXTRACT(MONTH FROM SALE_DATE) AS MONTH,
		EXTRACT(YEAR FROM SALE_DATE) AS YEAR,
		SUM(S.TOTAL) AS TOTAL_SALES,
		LAG(SUM(S.TOTAL), 1) OVER()
	FROM SALES AS S
	JOIN CUSTOMERS AS C
	ON C.CUSTOMER_ID = S.CUSTOMER_ID
	JOIN CITY AS CT
	ON C.CITY_ID = CT.CITY_ID
	GROUP BY 1,2,3
	ORDER BY 1,3,2
	),
GROWTH_DECLINE_CHANGE AS
(
SELECT 
	CITY_NAME,
	MONTH,
	YEAR,
	TOTAL_SALES AS CURRENT_MONTH_SALES,
	LAG(TOTAL_SALES, 1) OVER(PARTITION BY CITY_NAME ORDER BY YEAR, MONTH ASC) AS PREVIOUS_MONTH_SALES
FROM MONTHLY_SALES
)
SELECT 
	CITY_NAME,
	MONTH,
	YEAR,
	CURRENT_MONTH_SALES,
	PREVIOUS_MONTH_SALES,
	ROUND((CURRENT_MONTH_SALES:: NUMERIC - PREVIOUS_MONTH_SALES:: NUMERIC)/PREVIOUS_MONTH_SALES:: NUMERIC, 4) *100 AS GROWTH_CHANGE
	FROM GROWTH_DECLINE_CHANGE
	WHERE PREVIOUS_MONTH_SALES IS NOT NULL


-- Q.10
-- Market Potential Analysis
-- Identify top 3 city based on highest sales, return city name,  total sale, total rent, total customers, estimated coffee consumer

SELECT * FROM CITY; -- CITY_ID, CITY_NAME, population
SELECT * FROM CUSTOMERS; --CUSTOMER_ID, CITY_ID
SELECT * FROM SALES; -- SALE_ID & CUSTOMER_ID & PRODUCT_ID


SELECT 
	CT.CITY_NAME,
	CT.ESTIMATED_RENT,
	POPULATION * 0.25 AS ESTIMATED_COFFEE_CONSUMERS,
	COUNT (DISTINCT C.CUSTOMER_ID) AS TOTAL_CUSTOMERS,
	SUM(S.TOTAL) AS TOTAL_SALES,
	RANK() OVER(ORDER BY SUM(S.TOTAL) DESC)
FROM SALES AS S
JOIN CUSTOMERS AS C
ON S.CUSTOMER_ID = C.CUSTOMER_ID
JOIN CITY AS CT
ON C.CITY_ID = CT.CITY_ID
GROUP BY 1,2,3
ORDER BY 5 DESC


